import streamlit as st
import pandas as pd
import plotly.express as px
import time
from datetime import datetime
import random
import platform
import subprocess

class SecurityUI:
    """Classe para gerenciar a interface do usu√°rio do sistema de seguran√ßa"""
    
    def __init__(self, config, logger, network_monitor, security_agent, threat_intel):
        self.config = config
        self.logger = logger
        self.network_monitor = network_monitor
        self.security_agent = security_agent
        self.threat_intel = threat_intel
    
    def run(self):
        """Iniciar a interface Streamlit"""
        # Configura√ß√µes da p√°gina
        st.set_page_config(page_title="Agente Aut√¥nomo de Seguran√ßa", layout="wide")
        
        # Inicializar estado da sess√£o
        self._initialize_session_state()
        
        # Simula√ß√£o autom√°tica de ataques
        if st.session_state.simulation_active:
            self._auto_simulate_attack()
        
        # Renderizar componentes da UI
        self._render_header()
        self._render_simulation_control()
        self._render_metrics()
        self._render_controls()
        self._render_mcp()
        self._render_logs()
        self._render_sidebar()
        self._render_threat_intelligence()
        
        # Atualiza√ß√£o autom√°tica a cada 5 segundos
        time.sleep(5)  # Esperar 5 segundos
        st.rerun()  # Atualizar a p√°gina automaticamente
    
    def _initialize_session_state(self):
        """Inicializa todos os estados da sess√£o diretamente"""
        if "blocked_ips" not in st.session_state:
            st.session_state.blocked_ips = set()
        if "threat_stats" not in st.session_state:
            st.session_state.threat_stats = {'high': 0, 'medium': 0, 'low': 0}
        if "activity_log" not in st.session_state:
            st.session_state.activity_log = []
        if "monitoring_active" not in st.session_state:
            st.session_state.monitoring_active = True
        if "simulation_active" not in st.session_state:
            st.session_state.simulation_active = True
        if "monitoring_cycles" not in st.session_state:
            st.session_state.monitoring_cycles = 0
        if "last_attack_time" not in st.session_state:
            st.session_state.last_attack_time = 0
        if "mcp_context" not in st.session_state:
            st.session_state.mcp_context = {
                "contexto_amea√ßas": "Monitorando padr√µes de tr√°fego",
                "√∫ltima_atualiza√ß√£o": datetime.now().strftime("%H:%M:%S"),
                "n√≠vel_confian√ßa": 85,
                "estado_an√°lise": "Ativo",
                "an√°lises_pendentes": 0,
                "eventos_correlacionados": [],
                "padr√µes_identificados": []
            }
    
    def _render_simulation_control(self):
        """Renderiza o controle para ligar/desligar a simula√ß√£o"""
        col1, col2 = st.columns([4, 1])
        with col1:
            st.markdown("### Status da Simula√ß√£o:")
        with col2:
            simulation_state = "Ativa" if st.session_state.simulation_active else "Inativa"
            button_label = "Desativar Simula√ß√£o" if st.session_state.simulation_active else "Ativar Simula√ß√£o"
            button_color = "üî¥" if st.session_state.simulation_active else "üü¢"
            
            if st.button(f"{button_color} {button_label}", use_container_width=True):
                st.session_state.simulation_active = not st.session_state.simulation_active
                if st.session_state.simulation_active:
                    self.logger.log_activity("Simula√ß√£o de ataques ativada", "success")
                else:
                    self.logger.log_activity("Simula√ß√£o de ataques desativada", "warning")
                st.rerun()
                
        status_color = "success" if st.session_state.simulation_active else "warning"
        status_msg = "‚úÖ Simula√ß√£o de ataques est√° ATIVA - Ataques simulados a cada 7 segundos" if st.session_state.simulation_active else "‚ö†Ô∏è Simula√ß√£o de ataques est√° INATIVA - Nenhum ataque ser√° simulado"
        st.markdown(f":{status_color}[{status_msg}]")
    
    def _auto_simulate_attack(self):
        """Simula√ß√£o autom√°tica de ataques"""
        current_time = time.time()
        
        # Verificar se √© o primeiro carregamento da p√°gina
        first_load = False
        if "last_page_load" not in st.session_state:
            st.session_state.last_page_load = current_time
            first_load = True
            
        # Simular ataques em sequ√™ncia no primeiro carregamento
        if first_load:
            # Gerar 3 ataques iniciais (1 de cada tipo)
            self._simulate_attack_by_level("high")
            self._simulate_attack_by_level("medium")
            self._simulate_attack_by_level("low")
            st.session_state.last_attack_time = current_time
            
        # Realizar ciclo de monitoramento a cada 10 segundos
        if "last_monitoring_time" not in st.session_state:
            st.session_state.last_monitoring_time = 0
            
        if current_time - st.session_state.last_monitoring_time >= 10:
            self.network_monitor.start_monitoring()
            st.session_state.last_monitoring_time = current_time
        
        # Simular um ataque a cada 7 segundos
        if current_time - st.session_state.last_attack_time >= 7:
            self._simulate_random_attack()
            st.session_state.last_attack_time = current_time
            
        # Correla√ß√£o autom√°tica de eventos a cada 15 segundos
        if "last_correlation_time" not in st.session_state:
            st.session_state.last_correlation_time = 0
            
        if current_time - st.session_state.last_correlation_time >= 15:
            # Verificar se h√° eventos suficientes para correlacionar
            if len(self.logger.get_recent_logs(10)) >= 3:
                self._correlate_events(automatic=True)
                st.session_state.last_correlation_time = current_time
            
    def _simulate_attack_by_level(self, risk_level):
        """Simula um ataque de n√≠vel espec√≠fico (alto, m√©dio ou baixo)"""
        # Lista de IPs por categoria de risco
        high_risk_ips = [
            "192.168.1." + str(random.randint(1, 254)),
            "10.0.0." + str(random.randint(1, 254)),
            "172.16.0." + str(random.randint(1, 254))
        ]
        
        medium_risk_ips = [
            "8.8.8." + str(random.randint(1, 254)),
            "1.1.1." + str(random.randint(1, 254)),
            "208.67.222." + str(random.randint(1, 254))
        ]
        
        low_risk_ips = [
            "216.58.215." + str(random.randint(1, 254)),
            "151.101." + str(random.randint(1, 254)),
            "13.32." + str(random.randint(1, 254))
        ]
        
        # Configurar com base no n√≠vel solicitado
        if risk_level == "high":
            selected_ip = random.choice(high_risk_ips)
            risk_text = "ALTO"
            log_type = 'error'
            threat_types = ["Tentativa de Acesso N√£o Autorizado", "Execu√ß√£o de C√≥digo Remoto", "Ataque de For√ßa Bruta"]
            threat_details = ["Padr√£o de ataque conhecido detectado", "Tr√°fego malicioso detectado"]
        elif risk_level == "medium":
            selected_ip = random.choice(medium_risk_ips)
            risk_text = "M√âDIO"
            log_type = 'warning'
            threat_types = ["Atividade de Rede Suspeita", "Transfer√™ncia Incomum de Dados", "Conex√£o Suspeita"]
            threat_details = ["Padr√£o de tr√°fego incomum", "Tr√°fego suspeito detectado"]
        else:  # baixo
            selected_ip = random.choice(low_risk_ips)
            risk_text = "BAIXO"
            log_type = 'info'
            threat_types = ["Atividade Incomum", "Acesso a Recursos Sens√≠veis", "Comportamento Fora de Padr√£o"]
            threat_details = ["Poss√≠vel falso positivo", "Comportamento incomum detectado"]
        
        # Seleciona protocolos e portas
        protocol = random.choice(["TCP", "UDP", "HTTP", "HTTPS", "DNS"])
        port = random.randint(1, 65535)
        
        # Registra o alerta
        log_message = f"‚ö†Ô∏è ATAQUE SIMULADO: {random.choice(threat_types)} de {selected_ip}:{port} via {protocol} - Risco {risk_text}"
        self.logger.log_activity(log_message, log_type)
        
        # Envia para an√°lise no security agent
        threat_data = {
            "ip": selected_ip,
            "type": random.choice(threat_types),
            "details": random.choice(threat_details),
            "timestamp": datetime.now().isoformat(),
            "risk_level": risk_level
        }
        
        # Analisar a amea√ßa
        self.security_agent.analyze_threat(threat_data)
    
    def _render_header(self):
        """Renderiza o cabe√ßalho da aplica√ß√£o"""
        st.title("ü§ñ Agente Aut√¥nomo de Seguran√ßa Cibern√©tica")
        
        # Esconder bot√µes de simula√ß√£o manual j√° que agora √© autom√°tico
        if st.checkbox("üìä Mostrar Controles Manuais", value=False):
            col1, col2 = st.columns(2)
            with col1:
                if st.button("üîÑ For√ßar Ciclo de Monitoramento", use_container_width=True):
                    self.network_monitor.start_monitoring()
            
            with col2:
                if st.button("‚ö†Ô∏è For√ßar Detec√ß√£o de Amea√ßa", use_container_width=True):
                    self._simulate_random_attack()
    
    def _render_metrics(self):
        """Renderiza m√©tricas principais"""
        col1, col2, col3, col4 = st.columns(4)
        col1.metric("IPs Bloqueados", len(st.session_state.blocked_ips))
        col2.metric("IPs em Monitoramento", len(st.session_state.get("monitored_ips", set())))
        col3.metric("IPs em Honeypot", len(st.session_state.get("honeypot_ips", set())))
        col4.metric("Ciclos de Monitoramento", st.session_state.get("monitoring_cycles", 0))
        
        # Adicionar gr√°fico opcional se houver dados suficientes
        if st.session_state.threat_stats["high"] > 0 or st.session_state.threat_stats["medium"] > 0 or st.session_state.threat_stats["low"] > 0:
            data = {
                "Tipo": ["Alto", "M√©dio", "Baixo"],
                "Quantidade": [
                    st.session_state.threat_stats["high"],
                    st.session_state.threat_stats["medium"],
                    st.session_state.threat_stats["low"]
                ]
            }
            df = pd.DataFrame(data)
            fig = px.pie(df, values="Quantidade", names="Tipo", title="Distribui√ß√£o de Amea√ßas")
            st.plotly_chart(fig, use_container_width=True)
    
    def _render_controls(self):
        """Renderiza controles simplificados"""
        with st.container():
            st.subheader("üìä Monitoramento de Rede")
            
            # Status de monitoramento autom√°tico
            st.success("‚úÖ Sistema de Monitoramento Ativo")
            
            # Se√ß√£o para verificar bloqueio real
            st.subheader("üîç Verifica√ß√£o de Bloqueio Real")
            with st.expander("Verificar se um IP est√° bloqueado no firewall"):
                if "blocked_ips" in st.session_state and len(st.session_state.blocked_ips) > 0:
                    st.write("#### IPs atualmente bloqueados no sistema:")
                    blocked_list = list(st.session_state.blocked_ips)
                    
                    for ip in blocked_list:
                        col1, col2 = st.columns([4, 1])
                        with col1:
                            st.write(f"üõë **{ip}**")
                        with col2:
                            if st.button(f"Verificar", key=f"check_{ip}"):
                                is_blocked = self._check_ip_blocked(ip)
                                if is_blocked:
                                    st.success(f"‚úÖ O IP {ip} est√° realmente bloqueado no firewall")
                                else:
                                    st.error(f"‚ùå O IP {ip} N√ÉO est√° bloqueado no firewall")
                else:
                    st.info("Nenhum IP foi bloqueado ainda.")
                    
                st.write("---")
                st.write("Teste o bloqueio tentando pingar o IP:")
                st.code("ping 192.168.1.100")
                st.write("Se o IP estiver bloqueado, voc√™ ver√° erros de timeout ou falha na conex√£o.")
    
    def _check_ip_blocked(self, ip):
        """Verifica se um IP est√° realmente bloqueado no firewall
        
        Args:
            ip (str): O IP a verificar
            
        Returns:
            bool: True se estiver bloqueado, False caso contr√°rio
        """
        try:
            system = platform.system().lower()
            
            if system == "windows":
                rule_name = f"BlockIP-{ip.replace('.', '-')}"
                check_command = f'netsh advfirewall firewall show rule name="{rule_name}"'
                result = subprocess.run(check_command, shell=True, capture_output=True, text=True)
                
                return "No rules match the specified criteria" not in result.stdout
                
            elif system == "linux":
                check_command = f"sudo iptables -C INPUT -s {ip} -j DROP"
                result = subprocess.run(check_command, shell=True, capture_output=True)
                
                return result.returncode == 0
                
            else:
                return False
                
        except Exception as e:
            self.logger.log_activity(f"Erro ao verificar bloqueio do IP {ip}: {str(e)}", 'error')
            return False
    
    def _simulate_random_attack(self):
        """Simula um ataque com n√≠vel de risco variado com chances iguais"""
        # Decidir o n√≠vel de risco (33% para cada)
        risk_chance = random.random()
        
        # Lista de IPs por categoria de risco
        high_risk_ips = [
            "192.168.1." + str(random.randint(1, 254)),
            "10.0.0." + str(random.randint(1, 254)),
            "172.16.0." + str(random.randint(1, 254)),
            "45.33." + str(random.randint(1, 254)) + "." + str(random.randint(1, 254)),
            "104.131." + str(random.randint(1, 254)) + "." + str(random.randint(1, 254)),
            "185.25." + str(random.randint(1, 254)) + "." + str(random.randint(1, 254))
        ]
        
        medium_risk_ips = [
            "8.8.8." + str(random.randint(1, 254)),
            "1.1.1." + str(random.randint(1, 254)),
            "208.67.222." + str(random.randint(1, 254)),
            "195.12." + str(random.randint(1, 254)) + "." + str(random.randint(1, 254))
        ]
        
        low_risk_ips = [
            "216.58.215." + str(random.randint(1, 254)),
            "151.101." + str(random.randint(1, 254)) + "." + str(random.randint(1, 254)),
            "13.32." + str(random.randint(1, 254)) + "." + str(random.randint(1, 254))
        ]
        
        # Selecionar n√≠vel de risco e IP correspondente (33% cada)
        if risk_chance < 0.33:  # 33% chance alta
            risk_level = "high"
            selected_ip = random.choice(high_risk_ips)
            risk_text = "ALTO"
            log_type = 'error'
            threat_types = [
                "Tentativa de Acesso N√£o Autorizado",
                "Inje√ß√£o de SQL",
                "Execu√ß√£o de C√≥digo Remoto",
                "Ataque de For√ßa Bruta",
                "Propaga√ß√£o de Malware",
                "Comunica√ß√£o com Servidor C&C",
                "Varredura de Vulnerabilidades"
            ]
            threat_details = [
                "Padr√£o de ataque conhecido detectado",
                "M√∫ltiplas tentativas de autentica√ß√£o falhas",
                "Tr√°fego malicioso detectado",
                "Assinatura de exploit conhecida",
                "Comportamento consistente com roubo de dados"
            ]
        elif risk_chance < 0.66:  # 33% chance m√©dia
            risk_level = "medium"
            selected_ip = random.choice(medium_risk_ips)
            risk_text = "M√âDIO"
            log_type = 'warning'
            threat_types = [
                "Atividade de Rede Suspeita",
                "Comportamento An√¥malo de Usu√°rio",
                "Transfer√™ncia Incomum de Dados",
                "Conex√£o Suspeita",
                "Tentativa de Acesso a Recurso Restrito"
            ]
            threat_details = [
                "Padr√£o de tr√°fego incomum",
                "Comunica√ß√£o com dom√≠nio recentemente registrado",
                "Tr√°fego suspeito detectado",
                "Volume de dados anormal"
            ]
        else:  # 33% chance baixa
            risk_level = "low"
            selected_ip = random.choice(low_risk_ips)
            risk_text = "BAIXO"
            log_type = 'info'
            threat_types = [
                "Atividade Incomum",
                "Tentativa de Login de Nova Localiza√ß√£o",
                "Acesso a Recursos Sens√≠veis",
                "Comportamento Fora de Padr√£o",
                "Altera√ß√£o de Configura√ß√£o"
            ]
            threat_details = [
                "Poss√≠vel falso positivo",
                "Comportamento incomum detectado",
                "Pequeno desvio de comportamento padr√£o"
            ]
        
        # Seleciona protocolos e portas
        protocol = random.choice(["TCP", "UDP", "HTTP", "HTTPS", "DNS", "SMB", "RDP", "SSH"])
        port = random.randint(1, 65535)
        
        # Registra o alerta
        log_message = f"‚ö†Ô∏è ATAQUE SIMULADO: {random.choice(threat_types)} de {selected_ip}:{port} via {protocol} - Risco {risk_text}"
        self.logger.log_activity(log_message, log_type)
        
        # Envia para an√°lise no security agent
        threat_data = {
            "ip": selected_ip,
            "type": random.choice(threat_types),
            "details": random.choice(threat_details),
            "timestamp": datetime.now().isoformat(),
            "risk_level": risk_level
        }
        
        # Analisar a amea√ßa
        self.security_agent.analyze_threat(threat_data)
    
    def _render_mcp(self):
        """Renderiza o componente de Protocolo de Contexto do Modelo"""
        st.subheader("üß† Model Context Protocol (MCP)")
        
        # Atualizar o contexto do MCP a cada 15 segundos
        current_time = time.time()
        if "last_mcp_update" not in st.session_state:
            st.session_state.last_mcp_update = 0
            
        if current_time - st.session_state.last_mcp_update >= 15:
            self._update_model_context()
            # Realizar correla√ß√£o autom√°tica com o contexto
            self._correlate_events(automatic=True)
            st.session_state.last_mcp_update = current_time
        
        # Exibir o contexto em colunas
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("**Estado Atual do Sistema**")
            st.info(st.session_state.mcp_context["contexto_amea√ßas"])
            
            # Status do sistema em m√©tricas
            col_a, col_b = st.columns(2)
            with col_a:
                st.metric("N√≠vel de Confian√ßa", f"{st.session_state.mcp_context['n√≠vel_confian√ßa']}%")
            with col_b:
                st.metric("An√°lises Pendentes", st.session_state.mcp_context["an√°lises_pendentes"])
                
            # Adicionar novo: M√©tricas de auto-otimiza√ß√£o
            if "feedback_recebido" in st.session_state.mcp_context:
                st.metric("Feedback Recebido", st.session_state.mcp_context["feedback_recebido"], delta=1)
                
            st.caption(f"√öltima atualiza√ß√£o: {st.session_state.mcp_context['√∫ltima_atualiza√ß√£o']}")
            # Exibir informa√ß√£o sobre correla√ß√£o autom√°tica
            st.success("‚úÖ Correla√ß√£o autom√°tica ativa")
            if "last_correlation_time" in st.session_state:
                tempo_desde_correlacao = time.time() - st.session_state.last_correlation_time
                st.caption(f"Pr√≥xima correla√ß√£o em ~{15 - int(tempo_desde_correlacao % 15)} segundos")
                
        with col2:
            st.markdown("**Padr√µes Identificados**")
            
            if st.session_state.mcp_context["padr√µes_identificados"]:
                for pattern in st.session_state.mcp_context["padr√µes_identificados"]:
                    st.info(pattern)
            else:
                st.info("Nenhum padr√£o identificado ainda. O sistema est√° coletando dados.")
                
            if st.session_state.mcp_context["eventos_correlacionados"]:
                st.markdown("**Eventos Correlacionados**")
                for event in st.session_state.mcp_context["eventos_correlacionados"]:
                    st.warning(event)
        
        # Exibir linha do tempo de aprendizado (novo)
        if "threat_analysis_history" in st.session_state and len(st.session_state.threat_analysis_history) > 0:
            with st.expander("üìà Evolu√ß√£o do Aprendizado do Sistema", expanded=False):
                st.write("### Hist√≥rico de An√°lises e Aprendizado")
                
                # Preparar dados para visualiza√ß√£o
                history_data = []
                for entry in st.session_state.threat_analysis_history[-20:]:  # Mostrar apenas as 20 √∫ltimas entradas
                    history_data.append({
                        "Timestamp": pd.to_datetime(entry["timestamp"]).strftime("%H:%M:%S"),
                        "IP": entry["ip"],
                        "N√≠vel": entry["risk_level"],
                        "Score": entry["score"],
                        "Confian√ßa": entry["confidence"]
                    })
                
                if history_data:
                    history_df = pd.DataFrame(history_data)
                    
                    # Gr√°fico de evolu√ß√£o da confian√ßa
                    confidence_fig = px.line(
                        history_df, 
                        x=history_df.index, 
                        y="Confian√ßa",
                        title="Evolu√ß√£o da Confian√ßa nas An√°lises",
                        labels={"x": "An√°lise", "Confian√ßa": "N√≠vel de Confian√ßa"}
                    )
                    confidence_fig.update_layout(yaxis_range=[0, 1])
                    st.plotly_chart(confidence_fig, use_container_width=True)
                    
                    # Tabela com hist√≥rico
                    st.dataframe(history_df, use_container_width=True)
    
    def _update_model_context(self):
        """Atualiza o contexto do modelo MCP"""
        # Atualizar informa√ß√µes do contexto
        contextos = [
            "Analisando padr√µes de tr√°fego suspeitos", 
            "Correlacionando eventos de seguran√ßa", 
            "Avaliando comportamentos an√¥malos", 
            "Processando IOCs recentes",
            "Monitorando atividades de rede"
        ]
        
        confian√ßa = random.randint(70, 99)
        an√°lises = random.randint(0, 5)
        
        st.session_state.mcp_context = {
            "contexto_amea√ßas": random.choice(contextos),
            "√∫ltima_atualiza√ß√£o": datetime.now().strftime("%H:%M:%S"),
            "n√≠vel_confian√ßa": confian√ßa,
            "estado_an√°lise": "Ativo" if confian√ßa > 85 else "Alerta",
            "an√°lises_pendentes": an√°lises,
            "eventos_correlacionados": st.session_state.mcp_context.get("eventos_correlacionados", []),
            "padr√µes_identificados": st.session_state.mcp_context.get("padr√µes_identificados", [])
        }
        
        # Registrar no log
        self.logger.log_activity(f"MCP: Contexto atualizado - Confian√ßa: {confian√ßa}%", "info")
    
    def _correlate_events(self, automatic=False, force=False):
        """Correlaciona eventos de seguran√ßa para o MCP
        
        Args:
            automatic (bool): Se a correla√ß√£o foi acionada automaticamente
            force (bool): Se √© uma correla√ß√£o for√ßada (ignora o tempo m√≠nimo)
        """
        # Verificar se j√° houve correla√ß√£o recente (menos de 10 segundos atr√°s)
        if not force and "last_correlation_time" in st.session_state:
            if time.time() - st.session_state.last_correlation_time < 10:
                return  # Evitar correla√ß√µes muito frequentes
        
        # Simular correla√ß√£o de eventos
        eventos = [
            "M√∫ltiplas tentativas de login malsucedidas de IPs similares",
            "Padr√£o de varredura de portas seguido por tentativas de explora√ß√£o",
            "Comportamento an√¥malo em hosts previamente comprometidos",
            "Tr√°fego de rede suspeito para dom√≠nios rec√©m-registrados",
            "Sequ√™ncia de a√ß√µes administrativas fora do hor√°rio normal",
            "Transfer√™ncia incomum de dados para destinos externos"
        ]
        
        # Adicionar eventos correlacionados
        correla√ß√µes = []
        for _ in range(random.randint(1, 3)):
            correla√ß√µes.append(random.choice(eventos))
            
        st.session_state.mcp_context["eventos_correlacionados"] = correla√ß√µes
        
        # Identificar padr√µes com base nas correla√ß√µes
        padr√µes = [
            "Poss√≠vel campanha de ransomware em andamento",
            "Indicadores de APT (Amea√ßa Persistente Avan√ßada)",
            "Atividade consistente com reconhecimento de rede",
            "Potencial vazamento de dados em progresso",
            "Tentativa de eleva√ß√£o de privil√©gios detectada"
        ]
        
        # Adicionar 1-2 padr√µes aleat√≥rios
        st.session_state.mcp_context["padr√µes_identificados"] = random.sample(padr√µes, random.randint(1, 2))
        
        # Aumentar confian√ßa ap√≥s correla√ß√£o
        st.session_state.mcp_context["n√≠vel_confian√ßa"] = min(99, st.session_state.mcp_context["n√≠vel_confian√ßa"] + random.randint(1, 5))
        st.session_state.mcp_context["√∫ltima_atualiza√ß√£o"] = datetime.now().strftime("%H:%M:%S")
        
        # Registrar no log
        mode_text = "autom√°tica" if automatic else "manual"
        self.logger.log_activity(f"MCP: Correla√ß√£o {mode_text} - {len(correla√ß√µes)} eventos correlacionados. {len(st.session_state.mcp_context['padr√µes_identificados'])} padr√µes identificados.", "info")
    
    def _render_logs(self):
        """Renderiza se√ß√£o de logs"""
        st.subheader("üìù Logs em Tempo Real")
        log_container = st.empty()
        
        # Mostrar logs recentes
        logs = self.logger.get_recent_logs(30)
        log_text = "\n".join([f"{log['timestamp']} - {log['message']}" for log in logs])
        log_container.text_area("√öltimos 30 logs", log_text, height=400)
    
    def _render_sidebar(self):
        """Renderiza a barra lateral com informa√ß√µes essenciais"""
        st.sidebar.title("Sistema Aut√¥nomo Ativo")
        
        # Status do sistema
        if st.session_state.get('monitoring_active', False):
            st.sidebar.success("Sistema de Monitoramento Ativo")
        else:
            st.sidebar.warning("Sistema de Monitoramento Inativo")
        
        # Status da simula√ß√£o
        if st.session_state.get('simulation_active', False):
            st.sidebar.success("Simula√ß√£o de Ataques Ativa")
        else:
            st.sidebar.warning("Simula√ß√£o de Ataques Inativa")
        
        # MCP - Model Context Protocol
        st.sidebar.subheader("üß† Model Context Protocol")
        with st.sidebar.expander("Detalhes do MCP"):
            st.write("**Eventos Correlacionados**")
            if "eventos_correlacionados" in st.session_state.mcp_context and st.session_state.mcp_context["eventos_correlacionados"]:
                for evento in st.session_state.mcp_context["eventos_correlacionados"]:
                    st.write(f"- {evento}")
            else:
                st.write("Nenhum evento correlacionado ainda.")
        
        # Lista de IPs Monitorados
        if st.session_state.get('monitored_ips'):
            st.sidebar.subheader("IPs Monitorados")
            for ip in st.session_state.monitored_ips:
                st.sidebar.text(f"‚Ä¢ {ip}")
        
        # Lista de IPs em Honeypot
        if st.session_state.get('honeypot_ips'):
            st.sidebar.subheader("IPs em Honeypot üçØ")
            for ip in st.session_state.honeypot_ips:
                st.sidebar.text(f"‚Ä¢ {ip}")
        
        # Lista de IPs Bloqueados
        if st.session_state.get('blocked_ips'):
            st.sidebar.subheader("IPs Bloqueados")
            for ip in st.session_state.blocked_ips:
                st.sidebar.text(f"‚Ä¢ {ip}")
    
    def _render_threat_intelligence(self):
        """Renderiza se√ß√£o de intelig√™ncia de amea√ßas"""
        st.subheader("üîç Intelig√™ncia de Amea√ßas")
        
        # Campo de busca de IP
        ip_to_check = st.text_input("Buscar informa√ß√µes de IP")
        if ip_to_check and st.button("Pesquisar"):
            self._display_threat_intelligence(ip_to_check)
    
    def _display_threat_intelligence(self, ip):
        """Exibe informa√ß√µes de intelig√™ncia de amea√ßas na interface"""
        st.info("‚è≥ Analisando IP... O agente est√° pensando.")
        
        # Verificar se o sistema est√° usando LLM ou regras offline
        is_using_llm = not self.threat_intel.offline_mode and self.threat_intel.llm is not None
        
        # Obter dados das "APIs" (simuladas ou reais)
        vt_data = self.threat_intel.check_virustotal(ip)
        abuse_data = self.threat_intel.check_abuseipdb(ip)
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.write("**VirusTotal**")
            if "error" not in vt_data:
                st.metric("Detec√ß√µes Maliciosas", vt_data["malicious"])
                st.metric("Detec√ß√µes Suspeitas", vt_data["suspicious"])
                st.metric("Detec√ß√µes Inofensivas", vt_data["harmless"])
            else:
                st.error(vt_data["error"])
        
        with col2:
            st.write("**AbuseIPDB**")
            if "error" not in abuse_data:
                st.metric("Score de Confian√ßa", f"{abuse_data['abuse_confidence_score']}%")
                st.metric("Total de Relat√≥rios", abuse_data["total_reports"])
                if abuse_data["last_reported_at"]:
                    st.write(f"√öltimo relat√≥rio: {abuse_data['last_reported_at']}")
            else:
                st.error(abuse_data["error"])
        
        # An√°lise de amea√ßa
        if "error" not in vt_data and "error" not in abuse_data:
            threat_intel = self.threat_intel.analyze_threat_intelligence(ip)
            
            # Mostrar emblema LLM se estiver usando modelo
            risk_level_text = threat_intel['level']
            confidence = threat_intel.get('confidence', 0) * 100
            
            if is_using_llm:
                st.subheader(f"An√°lise de Amea√ßa: {risk_level_text} ü§ñ")
                st.info("An√°lise aprimorada por IA usando modelo de linguagem")
            else:
                st.subheader(f"An√°lise de Amea√ßa: {risk_level_text}")
            
            # Barra de progresso com cor baseada no risco
            risk_color = "red" if risk_level_text == "ALTO" else "orange" if risk_level_text == "M√âDIO" else "green"
            st.markdown(
                f"""
                <div style="background-color: #1E1E1E; border-radius: 10px; padding: 10px;">
                    <div style="background-color: {risk_color}; width: {min(threat_intel['score'] * 10, 100)}%; 
                    height: 20px; border-radius: 5px;"></div>
                </div>
                """, 
                unsafe_allow_html=True
            )
            
            # Exibir n√≠vel de confian√ßa
            st.metric("Confian√ßa na An√°lise", f"{confidence:.1f}%")
            
            if threat_intel["details"]:
                st.write("**Detalhes:**")
                for detail in threat_intel["details"]:
                    st.write(f"- {detail}")
            
            # Se√ß√£o de Explicabilidade - Novo
            if "decision_trace" in threat_intel and threat_intel["decision_trace"]:
                with st.expander("üìä Explicabilidade da Decis√£o", expanded=False):
                    st.write("### Rastreamento do Processo Decis√≥rio")
                    st.info("Veja abaixo cada etapa do processo de tomada de decis√£o pelo agente aut√¥nomo.")
                    
                    # Criar um dataframe para visualiza√ß√£o mais clara
                    decision_data = []
                    for i, decision in enumerate(threat_intel["decision_trace"]):
                        decision_data.append({
                            "Etapa": i+1,
                            "Componente": decision["node"],
                            "Decis√£o": decision["decision"],
                            "Motivo": decision["reason"],
                            "Confian√ßa": f"{decision['confidence']*100:.1f}%"
                        })
                    
                    if decision_data:
                        df = pd.DataFrame(decision_data)
                        st.dataframe(df, use_container_width=True)
                        
                        # Visualiza√ß√£o gr√°fica da confian√ßa por etapa
                        confidence_fig = px.line(
                            df, 
                            x="Etapa", 
                            y=[float(c.strip('%'))/100 for c in df["Confian√ßa"]], 
                            title="Evolu√ß√£o da Confian√ßa no Processo Decis√≥rio",
                            labels={"y": "Confian√ßa", "x": "Etapa do Processo"}
                        )
                        confidence_fig.update_layout(yaxis_range=[0, 1])
                        st.plotly_chart(confidence_fig, use_container_width=True)
            
            # Sistema de Feedback - Novo
            with st.expander("üîÑ Fornecer Feedback para Aprendizado", expanded=False):
                st.write("### Ajude a melhorar o sistema")
                st.info("Seu feedback ser√° usado para otimizar an√°lises futuras de IPs similares.")
                
                col1, col2 = st.columns(2)
                with col1:
                    is_accurate = st.radio(
                        "A an√°lise est√° correta?",
                        options=["Sim", "N√£o"],
                        index=0
                    )
                
                with col2:
                    correct_level = st.selectbox(
                        "N√≠vel de risco correto:",
                        options=["ALTO", "M√âDIO", "BAIXO"],
                        index=["ALTO", "M√âDIO", "BAIXO"].index(risk_level_text)
                    )
                
                feedback_comments = st.text_area(
                    "Coment√°rios adicionais:",
                    placeholder="Explique por que voc√™ considera esta classifica√ß√£o correta/incorreta..."
                )
                
                if st.button("Enviar Feedback", type="primary"):
                    was_accurate = is_accurate == "Sim"
                    self.threat_intel.provide_feedback(
                        ip=ip,
                        was_accurate=was_accurate,
                        correct_level=correct_level if not was_accurate else None,
                        comments=feedback_comments
                    )
                    st.success("‚úÖ Feedback registrado com sucesso! O sistema usar√° estas informa√ß√µes para melhorar an√°lises futuras.")
                    
                    # Atualizar o contexto do MCP com o feedback
                    if "mcp_context" in st.session_state:
                        # Adicionar ao contexto
                        if "feedback_recebido" not in st.session_state.mcp_context:
                            st.session_state.mcp_context["feedback_recebido"] = 0
                        st.session_state.mcp_context["feedback_recebido"] += 1
                        
                        # Registrar padr√£o aprendido
                        ip_pattern = ".".join(ip.split(".")[:2]) + ".*"
                        if was_accurate:
                            feedback_msg = f"Confirmado que IPs do padr√£o {ip_pattern} representam risco {risk_level_text}"
                        else:
                            feedback_msg = f"Corrigido: IPs do padr√£o {ip_pattern} devem ser classificados como {correct_level} (era {risk_level_text})"
                        
                        if "padr√µes_identificados" in st.session_state.mcp_context:
                            st.session_state.mcp_context["padr√µes_identificados"].append(feedback_msg)
                        
                        # Aumentar confian√ßa do MCP
                        if "n√≠vel_confian√ßa" in st.session_state.mcp_context:
                            # Aumenta mais se o feedback confirmar a decis√£o original
                            st.session_state.mcp_context["n√≠vel_confian√ßa"] += 3 if was_accurate else 1
                            # Limitar a 99
                            st.session_state.mcp_context["n√≠vel_confian√ßa"] = min(99, st.session_state.mcp_context["n√≠vel_confian√ßa"])
            
            # Bot√£o para bloquear IP
            if st.button(f"Bloquear IP {ip}"):
                result = self.security_agent.block_ip(ip)
                st.write(f"IP {ip} {result}") 